static UDPAddress WrapAddr(const sockaddr *addr)
{
    // Based on the family of the sockaddr,
    if (addr->sa_family == AF_INET)
    {
        const sockaddr_in *addr4 = reinterpret_cast<const sockaddr_in*>(addr);
        uint16_t port = ntohs(addr4->sin_port);
        uint32_t ip = addr4->sin_addr.s_addr;

        return UDPAddress(asio::ip::address_v4(ip), port);
    }

    if (addr->sa_family == AF_INET6)
    {
        const sockaddr_in6 *addr6 = reinterpret_cast<const sockaddr_in6*>(addr);
        uint16_t port = ntohs(addr6->sin6_port);

        std::array<uint8_t, 16> addr6data;
        for (unsigned i = 0; i < 16; ++i)
            addr6data[i] = addr6->sin6_addr.u.Byte[i];
        asio::ip::address_v6 ipaddr(addr6data, addr6->sin6_scope_id);

        return UDPAddress(ipaddr, port);
    }

    return UDPAddress();
}

