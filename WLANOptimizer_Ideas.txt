
// This stuff is used to generate the magic SDDL
#if 0

#include <Sddl.h>

void generateMagic()
{
    PSECURITY_DESCRIPTOR securityDescriptor = (PSECURITY_DESCRIPTOR)LocalAlloc(LMEM_FIXED, sizeof(SECURITY_DESCRIPTOR));
    PACL pAcl = (PACL)LocalAlloc(LMEM_FIXED, sizeof(PACL));
    SID_IDENTIFIER_AUTHORITY SIDAuthWorld = SECURITY_WORLD_SID_AUTHORITY;
    PSID pEveryoneSID = NULL;
    BOOL bRet, bRes = true;


    bRet = InitializeSecurityDescriptor(securityDescriptor, SECURITY_DESCRIPTOR_REVISION);
    if (!bRet)
    {
        //ST_TRACE(ST_LOG_LEVEL_WIFI_ERROR, L"Could not initialize Security Descriptor! %sn", GetLastError());
        bRes = false;
    }

    bRet = IsValidSecurityDescriptor(securityDescriptor);

    bRet = AllocateAndInitializeSid(&SIDAuthWorld, 1,
        SECURITY_WORLD_RID,
        0, 0, 0, 0, 0, 0, 0,
        &pEveryoneSID);
    if (!bRet)
    {
        //ST_TRACE(ST_LOG_LEVEL_WIFI_ERROR, L"Could not allocate and initialize SID! %sn", GetLastError());
        bRes = false;
    }

    bRet = IsValidSecurityDescriptor(securityDescriptor);

    bRet = SetSecurityDescriptorOwner(securityDescriptor, pEveryoneSID, TRUE);
    if (!bRet)
    {
        //ST_TRACE(ST_LOG_LEVEL_WIFI_ERROR, L"Could not set Security Descriptor Owner! %sn", GetLastError());
        bRes = false;
    }

    bRet = IsValidSecurityDescriptor(securityDescriptor);

    DWORD cbAcl = sizeof(ACL) +
        (sizeof(ACCESS_ALLOWED_ACE)) + (GetLengthSid(securityDescriptor) - sizeof(DWORD));
    bRet = InitializeAcl(pAcl, cbAcl, ACL_REVISION);
    if (!bRet)
    {
        //ST_TRACE(ST_LOG_LEVEL_WIFI_ERROR, L"Could not initialize ACL! %sn", GetLastError());
        bRes = false;
    }

    bRet = IsValidAcl(pAcl);

    const DWORD aceval = WLAN_READ_ACCESS | WLAN_EXECUTE_ACCESS | WLAN_WRITE_ACCESS;
    bRet = AddAccessAllowedAce(pAcl, ACL_REVISION, aceval, securityDescriptor);
    if (!bRet)
    {
        //ST_TRACE(ST_LOG_LEVEL_WIFI_ERROR, L"Could not add Access Allowed ACE! %sn", GetLastError());
        bRes = false;
    }

    bRet = IsValidSecurityDescriptor(securityDescriptor);

    bRet = SetSecurityDescriptorDacl(securityDescriptor, TRUE, pAcl, FALSE);
    if (!bRet)
    {
        //ST_TRACE(ST_LOG_LEVEL_WIFI_ERROR, L"Could not set Security Descriptor DACL! %sn", GetLastError());
        bRes = false;
    }

    bRet = IsValidSecurityDescriptor(securityDescriptor);

    LPWSTR pStringSecurityDescriptor = nullptr;
    ULONG len = 0;
    bRet = ConvertSecurityDescriptorToStringSecurityDescriptorW(securityDescriptor,
        SDDL_REVISION_1,
        DACL_SECURITY_INFORMATION,
        &pStringSecurityDescriptor,
        &len
    );
    if (!bRet)
    {
        //ST_TRACE(ST_LOG_LEVEL_WIFI_ERROR, L"Could not set convert SID to String-SID! %sn", GetLastError());
        bRes = false;
    }

    DWORD secdesc2sz = (DWORD)sizeof(SECURITY_DESCRIPTOR);
    DWORD paclsz = cbAcl;
    DWORD ownsz = sizeof(SID);
    PSECURITY_DESCRIPTOR securityDescriptor2 = (PSECURITY_DESCRIPTOR)LocalAlloc(LMEM_FIXED, sizeof(SECURITY_DESCRIPTOR));

    bRet = InitializeSecurityDescriptor(securityDescriptor2, SECURITY_DESCRIPTOR_REVISION);
    if (!bRet)
    {
        //ST_TRACE(ST_LOG_LEVEL_WIFI_ERROR, L"Could not initialize Security Descriptor! %sn", GetLastError());
        bRes = false;
    }

    bRet = IsValidSecurityDescriptor(securityDescriptor2);

    BOOL x = MakeAbsoluteSD(
        securityDescriptor,
        securityDescriptor2,
        &secdesc2sz,
        pAcl,
        &paclsz,
        nullptr,
        nullptr,
        pEveryoneSID,
        &ownsz,
        nullptr,
        nullptr);
    DWORD err = ::GetLastError();
    int y = 0;
}

#endif

// Does not actually work unfortunately.  Poorly documented and vague error code.
#if 0

static bool AllowUsersToEditSettings()
{
    //generateMagic();

    // Magic.
    static const LPCWSTR kEveryoneSDDL = L"D:(A;;0x00070023;;;S-1-1-0)";

    // TBD: Does this change persist between reboots?
    const DWORD streamingSecurityResult = ::WlanSetSecuritySettings(
        m_clientHandle,
        wlan_secure_media_streaming_mode_enabled,
        kEveryoneSDDL);
    if (streamingSecurityResult != ERROR_SUCCESS)
    {
        return false;
    }

    const DWORD bcSecurityResult = ::WlanSetSecuritySettings(
        m_clientHandle,
        wlan_secure_bc_scan_enabled,
        kEveryoneSDDL);
    if (bcSecurityResult != ERROR_SUCCESS)
    {
        return false;
    }

    return true;
}

#endif
